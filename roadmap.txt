#### Roadmap:

# Command to check if the submodules were properly loaded.
git submodule update --init

# First we have to set some environmental variables

# For example: which command is used to call GROMACS? If you are using an installation without MPI support, you might use "gmx". If you have MPI support, you might use "gmx_mpi", for example. Check your installation. In this case, it will be:

cmdgmx="gmx"

# Now, we have to set the number of OpenMP threads to be used. We are assuming simulations using just one node/computer. If you are using a PC, the better option here is the default (0). In this case, it will use the number set by the environment variable OMP_NUM_THREADS, common in some clusters.

nompt=$OMP_NUM_THREADS

# The downloaded PDB file is called 2ci2.pdb. The file ci2-clean.pdb is derived from the original, with just the lines beginning with ATOM, TER, and END remaining. The other lines were deleted. The HETATM entries in this PDB are just some water molecules that will not be used in our simulations and were also deleted.

# In this step the cleaned PDB file will be adjusted. The smog_adjustPDB function, in its standard options, will change the residue names accordingly to the atom sequence, if any other map is provided. Other changes in the format will be made in order to make the output file more suitable to generate the force field. If needed, the atoms will be renumbered or TER lines will be added if a gap will be found. None was needed in this case. The output is in the file "out-smog_adjustPDB.dat".

smog_adjustPDB -i ci2-clean.pdb -o ci2-adjusted.pdb > out-smog_adjustPBD.dat

# Now the force field will be generated for the All-atom model. The output is in the file "out-smog2-AA.dat"

smog2 -i ci2-adjusted.pdb -dname ci2-AA -AA &>> out-smog2-AA.dat

# Creating the folder to run the simulations and put all the force field files in it.

mkdir AA
mv ci2-AA* AA/
cd AA/

# From the ci2-AA.top file, extract the "[ pairs ]" section and create the file.cont file. This file will be used as a reference to count the native contacts.

# Creating an initial file with the selected molecule (the "atom" beads, in this case), and enlarging the simulation box (to avoid hitting the boundaries during the simulations. 

$cmdgmx editconf -f ci2-AA.gro -c -d 10 -o ci2-AA-box.gro -bt cubic &>> out-editconf-AA.dat

# The file example.mdp is an example MDP file (MDP: Molecular Dynamics Parameters file) for SMOG simulations used in GROMACS. This file was created using the example found in the SMOG2 package and changing the number of simulated steps to TSTEPS and the temperature to TEMP. This will be used ahead.

# Here the folders and the MDP files for each temperature are created 

temperatures="80 90 100 110 120 130 140 150"
steps="10000000"

# In this step the temperature and the number of steps will be replaced in the MDP file, and the output will be saved in the correspondent folder.

for i in $temperatures;
do
  mkdir $i;
  cd $i/
  sed 's/TEMP/'"$i"'/g;s/TSTEPS/'"$steps"'/g' ../example.mdp > reference.mdp
  cd ../
done

# The TPR file for each temperature is created here, using the MDP, GRO, and force field files.

for i in $temperatures;
do
  cd $i/;
  $cmdgmx grompp -f reference.mdp -c ../ci2-AA-box.gro -p ../ci2-AA.top -o t-$i-ci2.tpr &>> ../out-all-grompp-AA.dat;
  cd ..;
done

# Simulating each temperature at a time. Note that this command will work with non-MPI compiled GROMACS. Some additions/changes have to be made when using MPI compiled versions.

for i in $temperatures;
do
  cd $i/;
  sleep 1
  echo "Running the simulation"
  $cmdgmx mdrun -v -deffnm t-$i-ci2 -noddcheck -ntomp $nompt;
  cd ..;
done

# The file out-mdrun-AA.dat shows a header that should appear while running the simulation. That may change depending on your computer, gromacs version and/or installation. In this case, just the output for the first temperature is shown for simplicity. The others are analogs.

################################################################################
# The analysis part will begin here. The next sequence is made to extract the total number of native contacts formed for each frame. 
# NOTE: make sure you have python3 and all needed packages installed and loaded.
# To be sure, please consider installing the packages in the "requirements.txt" file.

for i in $temperatures;
do
  cd $i/;
  time python3 ../../contacts_chunk.py AA ../ci2-AA-box.gro t-$i-ci2.xtc ../file.cont contacts-AA-$i.dat &>> ../out-contacts-AA.dat & 
  cd ..;
done

# This sequence will extract the potential energy for each frame. 
for i in $temperatures;
do
  cd $i;
  echo 9 | $cmdgmx energy -f t-$i-ci2.edr -s t-$i-ci2.tpr;
  sed '1,23d' energy.xvg | awk '{print $2}' > energy.dat &
  sed '1,23d' energy.xvg | awk '{print $1}' > timestep-$i.dat 
  cd ../
done

# Control to wait for all the remaining executions to take place before the next step
wait;

# Now a set of files will be created with two columns: first the potential energy and the second will be the number of native contacts. The columns must be space delimited to be used in the program WHAM.jar, distributed with the SMOG2 package. 
# This sequence will generate the file "e-Q.dat" for all run temperatures.

for j in `ls -d */`; 
do 
  echo $j; 
  i=${j::-1};
  echo $i;
  cd $i;
  paste -d " " energy.dat contacts-AA-$i.dat > e-Q.dat;
  sleep 1;
  cd ..; 
done

# To run WHAM, one may go to the folder:

mkdir -p wham/first
cd wham/first;

# To run the WHAM.jar program, one must define a configuration file. Here goes an example in the file "config_wham.txt".
# And execute it:
java -jar $SMOG_FOLDER/src/tools/WHAM.jar --config config_wham.txt
cd ../../

# NOTE: $SMOG_FOLDER is the parent folder where your smog2 folder is placed. Please make sure to change this accordingly. 
# The WHAM.jar output files have the unbiased free energies for the selected temperatures (in the config_wham.txt file). Note also that the config_wham.txt file settings should reflect the values found in the e-Q.dat files. For example, the bin size and number of bins shall be chosen to cover the sampled range of each variable (energy and number of contacts). 
# To more details, check the SMOG2 manual at http://smog-server.org

# Checking the specific heat from the WHAM run, as the peak is around 122 and the free energies have not shown a smooth profile, the sampling around 122 may be improved.

temperatures="119 120.1 121 122 123 124"
steps="500000000"

# The file "example-2.mdp" will be used with a larger number of steps to be simulated. Unfortunately, due to time issues, some temperatures did not run until the end.

for i in $temperatures;
do
  mkdir $i;
  cd $i/
  sed 's/TEMP/'"$i"'/g;s/TSTEPS/'"$steps"'/g' ../example-2.mdp > reference.mdp
  cd ../
done

# The TPR file for each temperature is created here using the MDP, GRO, and force field files.

for i in $temperatures;
do
  cd $i/;
  $cmdgmx grompp -f reference.mdp -c ../ci2-AA-box.gro -p ../ci2-AA.top -o t-$i-ci2.tpr &>> ../out-all-grompp-AA.dat;
  cd ..;
done

# Simulating each temperature at a time.

for i in $temperatures;
do
  cd $i/;
  sleep 1
  echo "Running the simulation"
  $cmdgmx mdrun -v -deffnm t-$i-ci2 -noddcheck -ntomp $nompt;
  cd ..;
done

# Extracting the number of native contacts for each frame.

for i in $temperatures;
do
  cd $i/;
  time python3 ../../contacts_chunk.py AA ../ci2-AA-box.gro t-$i-ci2.xtc ../file.cont contacts-AA-$i.dat &>> ../out-contacts-AA.dat & 
  cd ..;
done

# This sequence will extract the potential energy for each frame. 

for i in $temperatures;
do
  cd $i;
  echo 9 | $cmdgmx energy -f t-$i-ci2.edr -s t-$i-ci2.tpr;
  sed '1,23d' energy.xvg | awk '{print $2}' > energy.dat &
  sed '1,23d' energy.xvg | awk '{print $1}' > timestep-$i.dat 
  cd ../
done

# Control to wait for all the remaining executions to take place before the next step
wait;

# Now a set of files will be created with two columns: first the potential energy and the second will be the number of native contacts. The columns must be space delimited to be used in the program WHAM.jar, distributed with the SMOG2 package. 
# This sequence will generate the file "e-Q.dat" for all run temperatures.

for j in `ls -d */`; 
do 
  echo $j; 
  i=${j::-1};
  echo $i;
  cd $i;
  paste -d " " energy.dat contacts-AA-$i.dat > e-Q.dat;
  sleep 1;
  cd ..; 
done

# To run WHAM, one may go to the folder:

mkdir -p wham/second
cd wham/second;

# And execute it:
java -jar $SMOG_FOLDER/src/tools/WHAM.jar --config config_wham.txt
cd ../../

# Checking the specific heat from the WHAM run, as the peak is around 122 and the free energies have not shown a smooth profile, the sampling around 122 may be improved.

# Now, both specific heat peak and free-energy profiles show the folding temperature should be close to T=119.[4-8]. So, the next range of simulated temperatures should be in this interval.

temperatures="119.1 119.2  119.4 119.6 119.8"
steps="100000000"

# Again the file "example-2.mdp" will be used. 

for i in $temperatures;
do
  mkdir $i;
  cd $i/
  sed 's/TEMP/'"$i"'/g;s/TSTEPS/'"$steps"'/g' ../example-2.mdp > reference.mdp
  cd ../
done

# The TPR file for each temperature is created here using the MDP, GRO, and force field files.

for i in $temperatures;
do
  cd $i/;
  $cmdgmx grompp -f reference.mdp -c ../ci2-AA-box.gro -p ../ci2-AA.top -o t-$i-ci2.tpr &>> ../out-all-grompp-AA.dat;
  cd ..;
done

# Simulating each temperature at a time.

for i in $temperatures;
do
  cd $i/;
  sleep 1
  echo "Running the simulation"
  $cmdgmx mdrun -v -deffnm t-$i-ci2 -noddcheck -ntomp $nompt;
  cd ..;
done

# Extracting the number of native contacts for each frame.

for i in $temperatures;
do
  cd $i/;
  time python3 ../../contacts_chunk.py AA ../ci2-AA-box.gro t-$i-ci2.xtc ../file.cont contacts-AA-$i.dat &>> ../out-contacts-AA.dat & 
  cd ..;
done

# This sequence will extract the potential energy for each frame. 

for i in $temperatures;
do
  cd $i;
  echo 9 | $cmdgmx energy -f t-$i-ci2.edr -s t-$i-ci2.tpr;
  sed '1,23d' energy.xvg | awk '{print $2}' > energy.dat &
  sed '1,23d' energy.xvg | awk '{print $1}' > timestep-$i.dat 
  cd ../
done

# Control to wait for all the remaining executions to take place before the next step
wait;

# Now a set of files will be created with two columns: first the potential energy and the second will be the number of native contacts. The columns must be space delimited to be used in the program WHAM.jar, distributed with the SMOG2 package. 
# This sequence will generate the file "e-Q.dat" for all run temperatures.

for j in `ls -d */`; 
do 
  echo $j; 
  i=${j::-1};
  echo $i;
  cd $i;
  paste -d " " energy.dat contacts-AA-$i.dat > e-Q.dat;
  sleep 1;
  cd ..; 
done

# To run WHAM, one may go to the folder:

mkdir -p wham/third
cd wham/third;

# And execute it:
java -jar $SMOG_FOLDER/src/tools/WHAM.jar --config config_wham.txt
cd ../../

# From the results was decided to enhance the sampling to make the trajectories better suitable to run the DrDiff framework. 

temperatures="119.7"
steps="10000000000"

# The file example-3.mdp defines a shorter step sampling. Now every 50 steps will be recorded. 

for i in $temperatures;
do
  mkdir $i;
  cd $i/
  sed 's/TEMP/'"$i"'/g;s/TSTEPS/'"$steps"'/g' ../example-3.mdp > reference.mdp
  cd ../
done

# The TPR file for each temperature is created here using the MDP, GRO, and force field files.

for i in $temperatures;
do
  cd $i/;
  $cmdgmx grompp -f reference.mdp -c ../ci2-AA-box.gro -p ../ci2-AA.top -o t-$i-ci2.tpr &>> ../out-all-grompp-AA.dat;
  cd ..;
done

# Simulating each temperature at a time.

for i in $temperatures;
do
  cd $i/;
  sleep 1
  echo "Running the simulation"
  $cmdgmx mdrun -v -deffnm t-$i-ci2 -noddcheck -noappend -nsteps -1 -ntomp $nompt;
  cd ..;
done

# Obs.: Due to a time limit, the simulation was not carried out until all requested steps were simulated, which is common especially while using a computer cluster.

# To simulate the next three parts for 24hours each (for example), one may use:
for a in `seq 1 3`;
do
  $cmdgmx mdrun -cpi t-$temperatures-ci2.cpt -v -deffnm t-$i-ci2 -noddcheck -ntomp 28 -noappend -nsteps -1 -maxh 24
done

# To get the number of trajectory files available:
nfiles=$( ls -l $temperatures/t-*xtc | wc -l | awk '{print $1}' )

# Extracting the number of native contacts for each frame for each part.
for i in $temperatures;
do
  cd $i/;
  for j in `seq 1 $nfiles`;
  do
    k=$( printf "%04d" $(( j )) )
    time python3 ../../contacts_chunk.py AA ../ci2-AA-box.gro t-$i-ci2.part"$k".xtc ../file.cont contacts-AA-$i.part"$k".dat &>> ../out-contacts-AA.dat & 
  done
  cd ..;
done

# This sequence will extract the potential energy for each frame and each part. 
for i in $temperatures;
do
  cd $i/;
  for j in *edr;
  do 
    echo 9 | $cmdgmx energy -f $j -s t-$i-ci2.tpr -o ${j::-4}.xvg &
    sleep 1;
  done

  wait;

  for j in *edr;
  do 
    sed '1,23d' ${j::-4}.xvg > time-${j::-4}.dat ;
    sleep 1;
  done
  cd ../
done
wait; 

# Now one has to compile all the parts results. Firstly, putting together the data (timestep, potential energy, and contacts) of all files discarding the overlapping frames based on the timestep. For that, one can use the following routines.

re='^[0-9]+([.][0-9]+)?$'
for temp in $temperatures;
do
  cd $temp;
  for i in `seq 1 $nfiles`;
  do 
    k=$( printf "%04d" $(( i )) )
    nlines=$( wc -l contacts-AA-"$temp".part"$k".dat | awk '{print $1}')
    echo "Analyzing part $k which has $nlines lines."
    head -n $nlines time-t-"$temp"-ci2.part"$k".dat > temporary-"$k".dat
    sed -i -e 's/\s\+/ /g;s/^ \+//g' temporary-"$k".dat
    paste -d " " temporary-"$k".dat contacts-AA-"$temp".part"$k".dat >> time-e-Q-"$k".dat;  
    sed -i -e 's/\s\+/ /g;s/^ \+//g' time-e-Q-"$k".dat
  done
  wait;
  for i in `seq 1 $nfiles`;
  do 
    k=$( printf "%04d" $(( i )) )
    j=$( printf "%04d" $(( i+1 )) )
    nfirst=$( head -n 1 time-e-Q-"$j".dat | awk '{print $1}' )
    if [[ $nfirst =~ $re ]] ; 
    then
      echo "Currently on part $k and part $j was found. Doing the math."
      awk -v limit="$nfirst" '$1<limit' time-e-Q-"$k".dat > limited-"$k".dat
      cat limited-"$k".dat >> time-e-Q.dat
    else
      echo "Last part."
      cat time-e-Q-"$k".dat >> time-e-Q.dat
    fi
  done
  rm temporary-* limited-* time-e-Q-*
  cd ../
done

# Now compiling the results and splitting the files
for i in $temperatures;
do
  cd $i;
  awk '{print $2, $3}' time-e-Q.dat > e-Q-total.dat 
  cd ..;
done

# To run WHAM and keep the same sampling, one should make e-Q.dat using each 10 saved frames to keep the saving frequency used in the other temperatures.

for i in $temperatures;
do
  cd $i;
  stride=10
  head -n 1 e-Q-total.dat > e-Q.dat
  sed '1d' e-Q-total.dat > core.dat
  awk -v patt="$stride" 'NR % patt == 0' core.dat >> e-Q.dat
  rm core.dat
  cd ..;
done

# Analyzing the current sampling on the temperature 119.7, from the free energy profile and the trajectory histogram it is clear that the unfolded state is more frequent, so the folding temperature should be smaller. 

# To run WHAM, one may go to the folder:

mkdir wham/fourth
cd wham/fourth;

# And execute it:
java -jar $SMOG_FOLDER/src/tools/WHAM.jar --config config_wham.txt
cd ../../

# The next temperature to be investigated: 119.5

temperatures="119.5"
steps="10000000000"

# The file example-3.mdp defines a shorter step sampling. Now every 50 steps will be recorded. 

for i in $temperatures;
do
  mkdir $i;
  cd $i/
  sed 's/TEMP/'"$i"'/g;s/TSTEPS/'"$steps"'/g' ../example-3.mdp > reference.mdp
  cd ../
done

# The TPR file for each temperature is created here using the MDP, GRO, and force field files.

for i in $temperatures;
do
  cd $i/;
  $cmdgmx grompp -f reference.mdp -c ../ci2-AA-box.gro -p ../ci2-AA.top -o t-$i-ci2.tpr &>> ../out-all-grompp-AA.dat;
  cd ..;
done

# Simulating each temperature at a time.

for i in $temperatures;
do
  cd $i/;
  sleep 1
  echo "Running the simulation"
  $cmdgmx mdrun -v -deffnm t-$i-ci2 -noddcheck -noappend -nsteps -1 -ntomp $nompt;
  cd ..;
done

# Obs.: Due to a time limit, the simulation was not carried out until all requested steps were simulated, which is common especially while using a computer cluster.

# To simulate the next twenty-four parts for 6 hours each (for example), one may use:
for a in `seq 1 25`;
do
  $cmdgmx mdrun -cpi t-$temperatures-ci2.cpt -v -deffnm t-$i-ci2 -noddcheck -ntomp 28 -noappend -nsteps -1 -maxh 6
done

# To get the number of trajectory files available:
nfiles=$( ls -l $temperatures/t-*xtc | wc -l | awk '{print $1}' )

# Extracting the number of native contacts for each frame for each part.
for i in $temperatures;
do
  cd $i/;
  for j in `seq 1 $nfiles`;
  do
    k=$( printf "%04d" $(( j )) )
    time python3 ../../contacts_chunk.py AA ../ci2-AA-box.gro t-$i-ci2.part"$k".xtc ../file.cont contacts-AA-$i.part"$k".dat &>> ../out-contacts-AA.dat & 
  done
  cd ..;
done

# This sequence will extract the potential energy for each frame and each part. 
for i in $temperatures;
do
  cd $i/;
  for j in *edr;
  do 
    echo 9 | $cmdgmx energy -f $j -s t-$i-ci2.tpr -o ${j::-4}.xvg &
    sleep 1;
  done

  wait;

  for j in *edr;
  do 
    sed '1,23d' ${j::-4}.xvg > time-${j::-4}.dat ;
    sleep 1;
  done
  cd ../
done
wait; 

# Now one has to compile all the parts results. Firstly, putting together the data (timestep, potential energy, and contacts) of all files discarding the overlapping frames based on the timestep. For that, one can use the following routines.

re='^[0-9]+([.][0-9]+)?$'
for temp in $temperatures;
do
  cd $temp;
  for i in `seq 1 $nfiles`;
  do 
    k=$( printf "%04d" $(( i )) )
    nlines=$( wc -l contacts-AA-"$temp".part"$k".dat | awk '{print $1}')
    echo "Analyzing part $k which has $nlines lines."
    head -n $nlines time-t-"$temp"-ci2.part"$k".dat > temporary-"$k".dat
    sed -i -e 's/\s\+/ /g;s/^ \+//g' temporary-"$k".dat
    paste -d " " temporary-"$k".dat contacts-AA-"$temp".part"$k".dat >> time-e-Q-"$k".dat;  
    sed -i -e 's/\s\+/ /g;s/^ \+//g' time-e-Q-"$k".dat
  done
  wait;
  for i in `seq 1 $nfiles`;
  do 
    k=$( printf "%04d" $(( i )) )
    j=$( printf "%04d" $(( i+1 )) )
    nfirst=$( head -n 1 time-e-Q-"$j".dat | awk '{print $1}' )
    if [[ $nfirst =~ $re ]] ; 
    then
      echo "Currently on part $k and part $j was found. Doing the math."
      awk -v limit="$nfirst" '$1<limit' time-e-Q-"$k".dat > limited-"$k".dat
      cat limited-"$k".dat >> time-e-Q.dat
    else
      echo "Last part."
      cat time-e-Q-"$k".dat >> time-e-Q.dat
    fi
  done
  rm temporary-* limited-* time-e-Q-*
  cd ../
done

# Obs.: The simulation files were redivided in the last two temperatures to comply with GitHub storage limits.

# Now compiling the results and splitting the files
for i in $temperatures;
do
  cd $i;
  awk '{print $2, $3}' time-e-Q.dat > e-Q-total.dat 
  cd ..;
done

# To run WHAM and keep the same sampling, one should make e-Q.dat using each 10 saved frames to keep the saving frequency used in the other temperatures.

for i in $temperatures;
do
  cd $i;
  stride=10
  head -n 1 e-Q-total.dat > e-Q.dat
  sed '1d' e-Q-total.dat > core.dat
  awk -v patt="$stride" 'NR % patt == 0' core.dat >> e-Q.dat
  rm core.dat
  cd ..;
done

# Analyzing the current sampling on the temperature 119.5, from the free energy profile and the trajectory histogram it seems the folding temperature is around 119.5. 

# To check an eventual change on the WHAM results, one may run:
# Note that some features were changed in the configuration file. 
# To run WHAM, one may go to the folder:

mkdir -p wham/fifth
cd wham/fifth;

# And execute it:
java -jar $SMOG_FOLDER/src/tools/WHAM.jar --config config_wham.txt
cd ../../

# To investigate some temperatures below folding temperature:
# The next temperature to be investigated: 119.3

temperatures="119.3"
steps="10000000000"

# The file example-3.mdp defines a shorter step sampling. Now every 50 steps will be recorded. 

for i in $temperatures;
do
  mkdir $i;
  cd $i/
  sed 's/TEMP/'"$i"'/g;s/TSTEPS/'"$steps"'/g' ../example-3.mdp > reference.mdp
  cd ../
done

# The TPR file for each temperature is created here using the MDP, GRO, and force field files.

for i in $temperatures;
do
  cd $i/;
  $cmdgmx grompp -f reference.mdp -c ../ci2-AA-box.gro -p ../ci2-AA.top -o t-$i-ci2.tpr &>> ../out-all-grompp-AA.dat;
  cd ..;
done

# Simulating each temperature at a time.

for i in $temperatures;
do
  cd $i/;
  sleep 1
  echo "Running the simulation"
  $cmdgmx mdrun -v -deffnm t-$i-ci2 -noddcheck -noappend -nsteps -1 -ntomp $nompt;
  cd ..;
done

# Obs.: Due to a time limit, the simulation was not carried out until all requested steps were simulated, which is common especially while using a computer cluster.

# Obs.: Due to a time limit, the simulation was not carried out until all requested steps were simulated, which is common especially while using a computer cluster.


# To simulate the next parts for 6 hours each (for example), one may use:
for a in `seq 1 14`;
do
  $cmdgmx mdrun -cpi t-$temperatures-ci2.cpt -v -deffnm t-$i-ci2 -noddcheck -ntomp 28 -noappend -nsteps -1 -maxh 6
done

# To get the number of trajectory files available:
nfiles=$( ls -l $temperatures/t-*xtc | wc -l | awk '{print $1}' )

# Extracting the number of native contacts for each frame for each part.
for i in $temperatures;
do
  cd $i/;
  for j in `seq 1 $nfiles`;
  do
    k=$( printf "%04d" $(( j )) )
    time python3 ../../contacts_chunk.py AA ../ci2-AA-box.gro t-$i-ci2.part"$k".xtc ../file.cont contacts-AA-$i.part"$k".dat &>> ../out-contacts-AA.dat & 
  done
  cd ..;
done

# This sequence will extract the potential energy for each frame and each part. 
for i in $temperatures;
do
  cd $i/;
  for j in *edr;
  do 
    echo 9 | $cmdgmx energy -f $j -s t-$i-ci2.tpr -o ${j::-4}.xvg &
    sleep 1;
  done

  wait;

  for j in *edr;
  do 
    sed '1,23d' ${j::-4}.xvg > time-${j::-4}.dat ;
    sleep 1;
  done
  cd ../
done
wait; 

# Now one has to compile all the parts results. Firstly, putting together the data (timestep, potential energy, and contacts) of all files discarding the overlapping frames based on the timestep. For that, one can use the following routines.

re='^[0-9]+([.][0-9]+)?$'
for temp in $temperatures;
do
  cd $temp;
  for i in `seq 1 $nfiles`;
  do 
    k=$( printf "%04d" $(( i )) )
    nlines=$( wc -l contacts-AA-"$temp".part"$k".dat | awk '{print $1}')
    echo "Analyzing part $k which has $nlines lines."
    head -n $nlines time-t-"$temp"-ci2.part"$k".dat > temporary-"$k".dat
    sed -i -e 's/\s\+/ /g;s/^ \+//g' temporary-"$k".dat
    paste -d " " temporary-"$k".dat contacts-AA-"$temp".part"$k".dat >> time-e-Q-"$k".dat;  
    sed -i -e 's/\s\+/ /g;s/^ \+//g' time-e-Q-"$k".dat
  done
  wait;
  for i in `seq 1 $nfiles`;
  do 
    k=$( printf "%04d" $(( i )) )
    j=$( printf "%04d" $(( i+1 )) )
    nfirst=$( head -n 1 time-e-Q-"$j".dat | awk '{print $1}' )
    if [[ $nfirst =~ $re ]] ; 
    then
      echo "Currently on part $k and part $j was found. Doing the math."
      awk -v limit="$nfirst" '$1<limit' time-e-Q-"$k".dat > limited-"$k".dat
      cat limited-"$k".dat >> time-e-Q.dat
    else
      echo "Last part."
      cat time-e-Q-"$k".dat >> time-e-Q.dat
    fi
  done
  rm temporary-* limited-* time-e-Q-*
  cd ../
done

# Obs.: The simulation files were redivided in the last two temperatures to comply with GitHub storage limits.

# Now compiling the results and splitting the files
for i in $temperatures;
do
  cd $i;
  awk '{print $2, $3}' time-e-Q.dat > e-Q-total.dat 
  cd ..;
done

# To run WHAM and keep the same sampling, one should make e-Q.dat using each 10 saved frames to keep the saving frequency used in the other temperatures.

for i in $temperatures;
do
  cd $i;
  stride=10
  head -n 1 e-Q-total.dat > e-Q.dat
  sed '1d' e-Q-total.dat > core.dat
  awk -v patt="$stride" 'NR % patt == 0' core.dat >> e-Q.dat
  rm core.dat
  cd ..;
done

# Analyzing the current sampling on the temperature 119.3, from the free energy profile and the trajectory histogram, it was decided to run the other two temperatures below the folding temperature.

# To check an eventual change on the WHAM results, one may run:
# Note that some features were changed in the configuration file. 
# To run WHAM, one may go to the folder:

mkdir -p wham/sixth
cd wham/sixth;

# And execute it:
java -jar $SMOG_FOLDER/src/tools/WHAM.jar --config config_wham.txt
cd ../../

temperatures="118.3 118.7"
steps="10000000000"

# The file example-3.mdp defines a shorter step sampling. Now every 50 steps will be recorded. 

for i in $temperatures;
do
  mkdir $i;
  cd $i/
  sed 's/TEMP/'"$i"'/g;s/TSTEPS/'"$steps"'/g' ../example-3.mdp > reference.mdp
  cd ../
done

# The TPR file for each temperature is created here using the MDP, GRO, and force field files.

for i in $temperatures;
do
  cd $i/;
  $cmdgmx grompp -f reference.mdp -c ../ci2-AA-box.gro -p ../ci2-AA.top -o t-$i-ci2.tpr &>> ../out-all-grompp-AA.dat;
  cd ..;
done

# Simulating each temperature at a time.

for i in $temperatures;
do
  cd $i/;
  sleep 1
  echo "Running the simulation"
  $cmdgmx mdrun -v -deffnm t-$i-ci2 -noddcheck -noappend -nsteps -1 -ntomp $nompt;
  cd ..;
done

# Obs.: Due to a time limit, the simulation was not carried out until all requested steps were simulated, which is common especially while using a computer cluster.

# To simulate the next parts for 6 hours each (for example), one may use:
for a in `seq 1 14`;
do
  $cmdgmx mdrun -cpi t-$temperatures-ci2.cpt -v -deffnm t-$i-ci2 -noddcheck -ntomp 28 -noappend -nsteps -1 -maxh 6
done

# Extracting the number of native contacts for each frame for each part.
for i in $temperatures;
do
  # To get the number of trajectory files available:
  nfiles=$( ls -l $i/t-*xtc | wc -l | awk '{print $1}' )
  cd $i/;
  for j in `seq 1 $nfiles`;
  do
    k=$( printf "%04d" $(( j )) )
    time python3 ../../contacts_chunk.py AA ../ci2-AA-box.gro t-$i-ci2.part"$k".xtc ../file.cont contacts-AA-$i.part"$k".dat &>> ../out-contacts-AA.dat & 
  done
  cd ..;
done

# This sequence will extract the potential energy for each frame and each part. 
for i in $temperatures;
do
  cd $i/;
  for j in *edr;
  do 
    echo 9 | $cmdgmx energy -f $j -s t-$i-ci2.tpr -o ${j::-4}.xvg &
    sleep 1;
  done

  wait;

  for j in *edr;
  do 
    sed '1,23d' ${j::-4}.xvg > time-${j::-4}.dat ;
    sleep 1;
  done
  cd ../
done
wait; 

# Now one has to compile all the parts results. Firstly, putting together the data (timestep, potential energy, and contacts) of all files discarding the overlapping frames based on the timestep. For that, one can use the following routines.

re='^[0-9]+([.][0-9]+)?$'
for temp in $temperatures;
do
  # To get the number of trajectory files available:
  nfiles=$( ls -l $temp/t-*xtc | wc -l | awk '{print $1}' )
  cd $temp;
  for i in `seq 1 $nfiles`;
  do 
    k=$( printf "%04d" $(( i )) )
    nlines=$( wc -l contacts-AA-"$temp".part"$k".dat | awk '{print $1}')
    echo "Analyzing part $k which has $nlines lines."
    head -n $nlines time-t-"$temp"-ci2.part"$k".dat > temporary-"$k".dat
    sed -i -e 's/\s\+/ /g;s/^ \+//g' temporary-"$k".dat
    paste -d " " temporary-"$k".dat contacts-AA-"$temp".part"$k".dat >> time-e-Q-"$k".dat;  
    sed -i -e 's/\s\+/ /g;s/^ \+//g' time-e-Q-"$k".dat
  done
  wait;
  for i in `seq 1 $nfiles`;
  do 
    k=$( printf "%04d" $(( i )) )
    j=$( printf "%04d" $(( i+1 )) )
    nfirst=$( head -n 1 time-e-Q-"$j".dat | awk '{print $1}' )
    if [[ $nfirst =~ $re ]] ; 
    then
      echo "Currently on part $k and part $j was found. Doing the math."
      awk -v limit="$nfirst" '$1<limit' time-e-Q-"$k".dat > limited-"$k".dat
      cat limited-"$k".dat >> time-e-Q.dat
    else
      echo "Last part."
      cat time-e-Q-"$k".dat >> time-e-Q.dat
    fi
  done
  rm temporary-* limited-* time-e-Q-*
  cd ../
done

# Obs.: The simulation files were redivided in the last two temperatures to comply with GitHub storage limits.

# Now compiling the results and splitting the files
for i in $temperatures;
do
  cd $i;
  awk '{print $2, $3}' time-e-Q.dat > e-Q-total.dat 
  cd ..;
done

# To run WHAM and keep the same sampling, one should make e-Q.dat using each 10 saved frames to keep the saving frequency used in the other temperatures.

for i in $temperatures;
do
  cd $i;
  stride=10
  head -n 1 e-Q-total.dat > e-Q.dat
  sed '1d' e-Q-total.dat > core.dat
  awk -v patt="$stride" 'NR % patt == 0' core.dat >> e-Q.dat
  rm core.dat
  cd ..;
done

# To check an eventual change on the WHAM results, one may run:
# Note that some features were changed in the configuration file. 
# To run WHAM, one may go to the folder:

mkdir wham/seventh
cd wham/seventh;

# And execute it:
java -jar $SMOG_FOLDER/src/tools/WHAM.jar --config config_wham.txt
cd ../../

